#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node *link;
} *head = NULL;  

void insertion_at_front();
void deletion_at_end();
void display();

int main() {  
    int ch;
    head = NULL;  
    while (ch != 4) {
        printf("\nEnter the choice\n1: Enqueue (Insert at Front)\n2: Dequeue (Delete at End)\n3: Display\n4: Exit\n");
        scanf("%d", &ch);

        switch (ch) {
            case 1: insertion_at_front(); break;
            case 2: deletion_at_end(); break;
            case 3: display(); break;
            case 4: break;
            default:
                printf("Invalid choice.\n");
        }
    }
    return 0;  
}

void insertion_at_front() {
    int item;
    struct node *temp;
    temp = (struct node *)malloc(sizeof(struct node));
    
    if (temp == NULL) {
        printf("No memory space available\n");
    } else {
        printf("Enter the number to add: ");
        scanf("%d", &item);
        
        temp->data = item;
        temp->link = head;  // Insert at the front
        head = temp;  // Update head to point to the new node
        printf("%d inserted at the front\n", item);
    }
}

void deletion_at_end() {
    struct node *temp, *ptr;
    
    if (head == NULL) {
        printf("List is empty, cannot delete.\n");
    } else if (head->link == NULL) {  // Only one node in the list
        ptr = head;
        head = NULL;  // List becomes empty
        printf("The data %d is deleted\n", ptr->data);
        free(ptr);
    } else {
        ptr = head;
        // Traverse to the second-last node
        while (ptr->link->link != NULL) {
            ptr = ptr->link;
        }
        // Now ptr points to the second-last node
        temp = ptr->link;
        ptr->link = NULL;  // Remove the last node
        printf("The data %d is deleted\n", temp->data);
        free(temp);  // Free the memory
    }
}

void display() {
    struct node *ptr = head;
    
    if (head == NULL) {
        printf("No elements in the list.\n");
    } else {
        printf("Linked list: ");
        while (ptr != NULL) {
            printf("%d ", ptr->data);
            ptr = ptr->link;
        }
        printf("\n");
    }
}

         
       
